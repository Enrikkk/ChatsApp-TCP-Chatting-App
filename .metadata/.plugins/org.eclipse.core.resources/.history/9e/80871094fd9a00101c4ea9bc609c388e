package application;

import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.scene.control.ScrollPane;
import javafx.stage.Stage;

public class ChatUI extends Stage {

    // Atributes.
    private boolean isHost;
    private VBox chatArea;
    private TextField inputField;
    private Button sendBtn;
    private LinkedList<String> messages;
    
    private String css = getClass().getResource("styles.css").toExternalForm(); // css styling.
    
    Stage originalStage;
    Scene originalScene;
    
    private Runnable onExitCallBack;
    private final ExecutorService executor = Executors.newSingleThreadExecutor();

    // Reference to scrollPane for auto-scroll
    private ScrollPane scrollPane;

    // Constructor.
    public ChatUI(boolean isHost, LinkedList<String> messages, Stage stage, Scene scene1) {
        this.isHost = isHost;
        this.messages = messages;
        this.originalStage = stage;
        this.originalScene = scene1;

        // Chat area inside a VBox
        this.chatArea = new VBox(10);
        this.chatArea.getStyleClass().add("chat-area");

        // Wrap VBox in a ScrollPane
        scrollPane = new ScrollPane(chatArea);
        scrollPane.setFitToWidth(true);
        scrollPane.setFitToHeight(true);
        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);

        // Layout root
        BorderPane root = new BorderPane();
        root.setCenter(scrollPane);

        // If this is a client, add input box + send button
        if (!isHost) {
            inputField = new TextField();
            inputField.setPromptText("Type your message...");
            inputField.getStyleClass().add("subtitle");

            this.sendBtn = new Button("Send");
            this.sendBtn.getStyleClass().add("send-btn");

            HBox inputBox = new HBox(10);
            inputBox.setPadding(new Insets(10));
            inputBox.getChildren().addAll(inputField, this.sendBtn);
            HBox.setHgrow(inputField, Priority.ALWAYS);

            root.setBottom(inputBox);

            // Event handlers
            sendBtn.setOnAction(_ -> storeActualMessage());
            inputField.setOnKeyPressed(e -> {
                if (e.getCode() == KeyCode.ENTER) storeActualMessage();
            });
        } else { // If it is a server host, we add the corresponding elements,
            Button exitBtn = new Button("Close Chat");
            exitBtn.getStyleClass().add("exit-btn");
            exitBtn.setOnAction(_ -> {
                if (onExitCallBack != null) {
                    onExitCallBack.run();
                }
                this.close();
            });
            
            root.setBottom(exitBtn);
            BorderPane.setAlignment(exitBtn, Pos.CENTER);
        }

        // Scene building.
        Scene scene = new Scene(root, 500, 700);
        scene.getStylesheets().add(css);
        this.setScene(scene);
        this.setTitle(isHost ? "Chat Host" : "Chat Client");
    }

    // Store input messages.
    public void storeActualMessage() {
        String msg = inputField.getText().trim();
        if (!msg.isEmpty()) {
            synchronized (messages) {
                this.messages.addLast(msg);
                this.messages.notify();
            }
            inputField.clear();
        }
    }

    // Get saves messages.
    public String getMessage() throws InterruptedException {
        synchronized (messages) {
            while (messages.isEmpty()) {
                messages.wait(); // waits until a message is available-
            }
            return messages.pop();
        }
    }


    // This will serve as introduction messages to show the user what 
	// the difference messages mean depending on their styling.
    public void appendIntroUser() {
    	
    	this.appendMessage("Introduction to Message Types: ", "server");
    	this.appendMessage("Other User's Messages will be Green, and placed at the left of the screen", "in");
        this.appendMessage("Server's Messages will be Grey, and placed at the middle of the screen.", "server");
        this.appendMessage("Your Messages will be Blue, and placed at the right of the screen.", "out");        
        
        // Auto scroll added when a new message sent at the bottom.
        scrollPane.layout();
        scrollPane.setVvalue(1.0);
    }
    
    // Write a message into the text area.
    public void appendMessage(String message, String type) {
        Platform.runLater(() -> {
            Label t = new Label(message);
            t.setWrapText(true);
            t.setMaxWidth(300);
            t.setMinHeight(Region.USE_PREF_SIZE);

            HBox container = new HBox();
            container.setFillHeight(true);

            switch (type) {
                case "in":
                    t.getStyleClass().add("message-in");
                    container.setAlignment(Pos.CENTER_LEFT);
                    break;

                case "out":
                    t.getStyleClass().add("message-out");
                    container.setAlignment(Pos.CENTER_RIGHT);
                    break;

                case "server":
                    t.getStyleClass().add("message-server");
                    container.setAlignment(Pos.CENTER);
                    break;

                default:
                    t.getStyleClass().add("message-normal");
                    container.setAlignment(Pos.CENTER_LEFT);
                    break;
            }

            // Add message into proper HBox and HBox into chat area.
            container.getChildren().add(t);
            chatArea.getChildren().add(container);
            
            // Auto scroll added when a new message sent at the bottom.
            scrollPane.layout();
            scrollPane.setVvalue(1.0);
        });
    }

    // Exit methods.
    public void setOnExitCallback(Runnable onExitCallback) {
        this.onExitCallBack = onExitCallback;
    }

    public void shutdown() {
        executor.shutdownNow();
    }

}
